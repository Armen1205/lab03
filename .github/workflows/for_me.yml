# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
         cat >> CMakeLists.txt <<EOF
         cmake_minimum_required(VERSION 3.4)
         project(formatter)
         set(CMAKE_CXX_STANDARD 11)
         set(CMAKE_CXX_STANDARD_REQUIRED ON)  
         add_library(formatter STATIC ${CMAKE_CURRENT_SOURCE_DIR}/formatter.cpp)
         add_executable(formatter ${CMAKE_CURRENT_SOURCE_DIR}/formatter.cpp)
         target_link_libraries(formatter formatter_lib1)
         EOF
     
         cat >> CMakeLists1.txt <<EOF
         cmake_minimum_required(VERSION 3.4)
         project(formatter_ex)
         set(CMAKE_CXX_STANDARD 11)
         set(CMAKE_CXX_STANDARD_REQUIRED ON)
         add_library(formatter_exlib STATIC ${CMAKE_CURRENT_SOURCE_DIR}/formatter_ex.cpp)
         add_executable(formatter_ex ${CMAKE_CURRENT_SOURCE_DIR}/formatter_ex.cpp)
         target_link_libraries(formatter_ex formatter_exlib)
         EOF
         
         cat >> Cmakelists.txt << EOF
         cmake_minimum_required(VERSION 3.4)
         project(solver_lib)
         set(CMAKE_CXX_STANDARD 11)
         set(CMAKE_CXX_STANDARD_REQUIRED ON)
         add_library(solver_lib STATIC ${CMAKE_CURRENT_SOURCE_DIR}/solver.cpp)
         add_executable(solver ${CMAKE_CURRENT_SOURCE_DIR}/solver.cpp)
         target_link_libraries(solver solver_lib)
         Cmakelists.txt
         cmake_minimum_required(VERSION 3.4)
         project(solver_app)
         set(CMAKE_CXX_STANDARD 11)
         set(CMAKE_CXX_STANDARD_REQUIRED ON)
         add_executable(solver_app ${CMAKE_CURRENT_SOURCE_DIR}/equation.cpp)
         Cmakelists.txt
         cmake_minimum_required(VERSION 3.4)
         project(hello_world)
         set(CMAKE_CXX_STANDARD 11)
         set(CMAKE_CXX_STANDARD_REQUIRED ON)
         add_executable(hello_world ${CMAKE_CURRENT_SOURCE_DIR}/hello_world.cpp)
         EOF
